# forked from https://raw.githubusercontent.com/gruberdev/local-gitops/main/tasks/tools.yaml 
version: '3'

silent: true
env:
  VAULT_ADDR: "https://vault.k8s.localhost"
  VAULT_SKIP_VERIFY: "true"
  HOSTCTL: 1.1.4

tasks:

  autocomplete-taskfile:
    cmds: #see https://github.com/go-task/task/pull/906/files#diff-19fd876fb56da88a1becb80817b52db1a40e8491641d547913b93bb7ecda3d22
    - |
      {{if or (eq OS "linux") (eq OS "darwin")}}
        set -e;
        if [ "${SHELL##*/}" = 'zsh' ] && [ -d "$ZSH" ]; then
          echo "autocomplete-taskfile: oh-my-zsh detected"
          if [ -f $ZSH/completions/_task ]; then
            echo "autocomplete-taskfile: [-] .oh-my-zsh installation includes taskfile autocompletion :)"
          else
            echo "autocomplete-taskfile: adding taskfile autocompletion for .oh-my-zsh installation..."
            mkdir -p $ZSH/completions;
            curl https://raw.githubusercontent.com/go-task/task/main/completion/zsh/_task > $ZSH/completions/_task
            echo "autocomplete-taskfile: [v] added: $ZSH/completions/_task"
            UPDATED=true
          fi
          if grep 'autoload -U compinit && compinit -i' ~/.zshrc > /dev/null; then
            echo "autocomplete-taskfile: [-] ~/.zshrc seems to include autoload directive"
          else 
            echo 'autoload -U compinit && compinit -i' >> ~/.zshrc
            echo "autocomplete-taskfile: [v] added autoload directive to ~/.zshrc"
            UPDATED=true
          fi
          if [ "true" = "$UPDATED" ]; then source ~/.zshrc; fi
        # elif [ "${SHELL##*/}" = 'zsh' ] ... i.e - zsh w/o oh-my-zsh
        # elif [ "${SHELL##*/}" = 'bash' ] ...
        # elif [ "${SHELL##*/}" = 'fish' ] ...
        else
          echo "autocomplete-taskfile: [ ] did not recognize shell - did not install anything"
        fi
      {{else}}
        echo "autocomplete-taskfile: No handling of autocomplete for your OS - not doing anything"
      {{end}}

  install:
    cmds:
    - task: autocomplete-taskfile
    - task: mkcert
    - task: kustomize
    - task: k3d
    - task: kubectl
    - task: jq
    - task: vault
    - task: hostctl

  mkcert:
    cmds:
    - |
      echo -e "Installing mkcert" && \
      {{if eq OS "windows"}}choco install mkcert{{end}} \
      {{if eq OS "darwin"}}brew install mkcert && brew install nss{{end}} \
      {{if eq OS "linux"}}brew install mkcert{{end}}
    ignore_error: true

  kustomize:
    cmds:
    - |
      echo -e "Installing kustomize" && \
      {{if eq OS "windows"}}choco install kustomize \
      {{else}}brew install kustomize{{end}}

  k3d:
    cmds:
    - |
      echo -e "Installing k3d" && \
      {{if eq OS "windows"}}choco install k3d \
      {{else}}brew install k3d{{end}}

  kubectl:
    cmds:
    - |
      echo -e "Installing kubectl" && \
      {{if eq OS "windows"}}choco install kubernetes-cli \
      {{else}}brew install kubernetes-cli{{end}}

  jq:
    cmds:
    - |
      echo -e "Installing jq" && \
      {{if eq OS "windows"}}choco install jq\
      {{else}}brew install jq{{end}}

  hostctl:
    cmds:
    - |
      echo -e "Installing hostctl"
      {{if eq OS "windows"}}choco install wget && \
      cd utilities && \
      wget https://github.com/guumaster/hostctl/releases/download/v$HOSTCTL/hostctl_${HOSTCTL}_windows_64-bit.zip && \
      unzip hostctl_${HOSTCTL}_windows_64-bit.zip && \
      rm hostctl_${HOSTCTL}_windows_64-bit.zip LICENSE README.md{{end}}
      {{if eq OS "darwin"}}
      brew install hostctl{{end}}
      {{if eq OS "linux"}}
      curl -LO https://github.com/guumaster/hostctl/releases/download/v$HOSTCTL/hostctl_${HOSTCTL}_linux_64-bit.tar.gz && \
      tar -xvf hostctl_${HOSTCTL}_linux_64-bit.tar.gz && \
      rm hostctl_${HOSTCTL}_linux_64-bit.tar.gz LICENSE README.md && \
      sudo mv hostctl /usr/local/bin{{end}}

  vault:
    cmds:
    - |
      echo -e "Installing Vault CLI" && \
      {{if eq OS "windows"}}choco install vault \
      {{else}}brew tap hashicorp/tap && brew install hashicorp/tap/vault{{end}}
