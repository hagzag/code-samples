version: '3'

silent: true

includes:
  helm: ../utils/helm.yaml

tasks:

  install-kubeseal:
    desc: Install kubeseal
    cmds:
    - kubeseal --version || brew install kubeseal

  local-dryrun:
    vars: &vars
      CHART: &sealed_secrets_ns sealed-secrets
      CHART_FOLDER: '{{.ROOT_DIR}}/config/apps/sealed-secrets'
      VALUES_FILES: '{{.ROOT_DIR}}/config/apps/sealed-secrets/values.yaml'
      NAMESPACE: *sealed_secrets_ns
      REPO_URL: https://bitnami-labs.github.io/sealed-secrets
    cmds:
      - task: helm:repo_add
        vars: *vars
      - task: helm:dependency_build 
        vars: *vars
      - task: helm:template
        vars: *vars
      - task: helm:template_apply_dry_run
        vars: *vars

  local-apply:
    cmds:
      - task: helm:dependency_build 
        vars: *vars
      - task: helm:install
        vars: *vars

  create-private-key:
    dir: .config/sealed-secrets
    desc: Create a private key
    cmds:
    - cp -r {{.ROOT_DIR}}/config/sealed-secrets/* {{.ROOT_DIR}}/.config/sealed-secrets
    - mkcert -install
    - mkcert -cert-file base/sealed-secrets.crt -key-file base/sealed-secrets.key sealed-secrets
    - echo -e "Creating certificate secrets on Kubernetes for sealed-secrets to persists dusing installagions - simulate a production install \n"
    - kubectl get ns sealed-secrets || kubectl create ns sealed-secrets
    - kubectl config set-context --current --namespace=sealed-secrets --cluster=k3d-{{.CLUSTER_NAME}}
    - kubectl create secret tls sealed-secrets-key --cert=base/sealed-secrets.crt --key=base/sealed-secrets.key --dry-run=client -o yaml > base/sealed-secrets-key-secret.yaml
    - kubectl apply -k ./
    - echo -e "\nCertificate resources have been created.\n"

  test-sealed-secret:
    dir: .config/sealed-secrets
    desc: Create a sealed secret
    cmds:
    - |
      cat<<EOF>password.txt
      my-super-secret-password
      EOF
    - kubectl create secret generic db-password -n default --from-file=password.txt --dry-run=client -o yaml | kubeseal --controller-namespace sealed-secrets -oyaml > sealed-secrets.yaml
    - kubectl apply -f sealed-secrets.yaml
    - echo -e "\nThe content of the secret expected to be encrypted and stored in the cluster\n"
    - kubectl get sealedsecrets.bitnami.com db-password -n default -o json | jq '.spec.encryptedData | map_values(@base64d)'
    # - kubectl get secret -n default db-password -o json | jq '.data | map_values(@base64d)'
    # - kubeseal --fetch-cert --controller-namespace sealed-secrets --controller-name sealed-secrets > cert.pem
