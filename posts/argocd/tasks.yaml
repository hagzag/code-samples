version: '3'

silent: true

tasks:

  secret:
    requires:
      vars: [GH_USER, GH_PASS]
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url
    cmds:
    - kubectl get ns argocd || kubectl create ns argocd
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: private-repo-creds
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repo-creds
      stringData:
        type: git
        url: {{.GIT_URI}}
        password: $GH_PASS
        username: $GH_USER
      EOF
    ignore_error: true

  repo:
    requires:
      vars: [GH_USER, GH_PASS]
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url
    cmds:
    - kubectl get ns argocd || kubectl create ns argocd
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: main-repository
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: {{.GIT_URI}}
        password: $GH_PASS
        username: $GH_USER
      EOF
    ignore_error: true

  install:
    desc: Installs ArgoCD resources manually on the local cluster
    dir: config/apps/argocd
    preconditions:
    - sh: 'which kustomize'
      msg: 'kustomize {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - kubectl get ns argocd &>/dev/null || kubectl create namespace argocd
    - kubectl config set-context --current --namespace=argocd --cluster=k3d-{{.CLUSTER_NAME}}
    - kustomize build | kubectl apply -f -
    - sleep 10
    - kustomize build | kubectl apply -f -
    - kubectl wait deploy/argocd-server -n argocd --for condition=available --timeout=600s
    - kubectl apply -f ../argocd.yaml
    - echo ""
    ignore_error: true

  rm:
    dir: config/apps/argocd
    cmds:
    - kustomize build | kubectl delete -f -
    ignore_error: true

  bridge: kubectl port-forward -n argocd svc/argocd-server 8832:80

  password:
    cmds:
    - echo -e "\nYour ArgoCD Admin user password is "
    - kubectl config set-context --current --namespace=argocd --cluster=k3d-{{.CLUSTER_NAME}}
    - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
    ignore_error: true
